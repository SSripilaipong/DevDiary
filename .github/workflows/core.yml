name: Core
on:
  push:
    branches:
      - main
    paths:
      - core/**
      - .github/workflows/core.yml
      - .github/actions/core/**
jobs:
  deploy-core-infrastructure:
    name: Deploy core.infrastructure to AWS
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./core/infrastructure
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - uses: actions/checkout@v1

      - name: Apply Terraform
        uses: ./.github/actions/core/infrastructure/apply
        with:
          infrastructure-directory: ./core/infrastructure/src
          app-name: ${{ secrets.APP_NAME }}
          region: ${{ secrets.AWS_REGION }}
          tf-bucket: ${{ secrets.TF_BACKEND_BUCKET_NAME }}
          environment: prod

  deploy-core-frontend:
    name: Deploy core.frontend to AWS
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./core/frontend
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - uses: actions/checkout@v1

      - name: Build Frontend
        uses: ./.github/actions/core/frontend/build
        with:
          frontend-directory: ./core/frontend
          identity-remote-entry-url: https://devdiary.link/_s3/identity/remoteEntry.js
          public-path: /_s3/core/

      - name: Upload to S3
        env:
          FRONTEND_S3_BUCKET_NAME: ${{ secrets.APP_NAME }}
          UPLOAD_PATH: core
        run: aws s3 cp dist/ s3://"$FRONTEND_S3_BUCKET_NAME"/_s3/"$UPLOAD_PATH" --recursive

      - name: Clear non-code Artifacts (will upload artifacts to s3)
        run: rm -rf dist/ node_modules/

      - name: Invalidate Cache on Cloudfront if CLOUDFRONT_DISTRIBUTION_ID provided
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          S3_PATH: /_s3/core/*
        run: |
          if [[ ! -z "$CLOUDFRONT_DISTRIBUTION_ID" ]]
          then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "$S3_PATH"
          fi
